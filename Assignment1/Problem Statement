You are hired by a pharmacy to write a software application that helps their staff (users)
in keeping track of the vaccines at the store.
Write a driver program that will contain the main() method and will perform following:
(Note: You can have the main method in a separate driver file, or in the same file)
Display a welcome message.
  Prompt the user for the maximum number of vaccines (maxVaccines) his/her store
can contain. Create an empty array, called inventory, that will have the potential
of keeping track of all the created Vaccine objects.
  Display a main menu (figure 1) with the following choices and keep prompting the
user until they enter a number between 1 and 5 inclusive:
Figure 1. Main menu
  When option 1 is entered:
  Prompt the user for his/her password. (Make sure you have a constant variable
containing the password “password” – do not use any other password as it will
be easier for the marker to check your assignments). The user has a maximum
of 3 attempts to enter the correct password. After the 3rd wrong attempt entry,
the main menu in figure 1 is re-displayed. Additionally, after this is repeated 4
times (i.e., after total 12 consecutive failed attempts), the program must display
following message:
“Program detected suspicious activities and will terminate immediately!”, then
the program must exit.
  If correct password is entered, ask the user how many vaccines he/she wants
to enter. Check to make sure that there is enough space in the store (array of
Vaccines) to add that many vaccines. If so, add them; otherwise inform the user
that he/she can only add the number of remaining places in the array. (How the
vaccine information will be inputted/entered by the user, is up to you).
  When option 2 is entered:
  Prompt the user for a password. (Make sure you have a constant containing the
password “password” as a constant – do not use another password). Again, the
user has 3 attempts to enter the correct password. However, after the 3rd wrong
attempt, the main menu in figure 1 is simply re-displayed. (Notice the different
behaviour in that case from the previous one above).
  Once the correct password was entered, the user is asked which vaccine number
he/she wishes to update. Vaccine number is the index in the array inventory. If
there is no Vaccine object at specified index location, display a message asking
the user if he/she wishes to re-enter another vaccine, or quit this operation and
      
      What do you want to do?
      1. Enter new vaccines (password required)
      2. Change information of a vaccine (password required)
      3. Display all vaccines by a specific brand
      4. Display all vaccines under a certain a price.
      5. Quit
      Please enter your choice >


go back to the main menu. If the entered index has a valid vaccine, display the
current information of that vaccine in the following format:
        Vaccine: # x (index of the vaccine in the inventory array)
        ID: ID of the vaccine 
        Brand: Brand of the vaccine
        Dose: Dosage amount of the vaccine
        Expiry: Expiry date of the vaccine
        Price: $ price
  
Then ask the user which attribute they wish to change by displaying following
menu.

  Once the user has entered a correct choice, make the changes to the attribute
then display again all the attributes on the screen to show that the attribute has
been changed. Keep prompting the user for additional changes until choice 5 is
selected. Each time the user is prompted for a choice make sure that a number
from 1 to 5 is entered, otherwise keep prompting until a valid number is entered.
(Ensure that the user can change any of the choice 1 to 4 on figure 2).
  When option 3 (in the main menu shown in figure. 1) is entered, prompt the user
to enter a brand name. You then need to display the information of all vaccines by
that requested brand. (Hint: You may use a static method called findVaccinesBy,
which accepts an Enum for a brand name name then performs the needed search).
  When option 4 (in the main menu shown in figure. 1) is entered, prompt the user
to enter a value (representing a price). You then need to display all vaccines that
have a value smaller than that entered value. (Hint: You may use a static method,
for instance called findCheaperThan, which accepts a double value, for a price,
then performs the needed search).
  When option 5 (in the main menu shown in figure. 1) is entered, display a closing
message, and end the driver.
